/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.switchyard.tools.models.switchyard1_0.camel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.switchyard.tools.models.switchyard1_0.camel.util.CamelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CamelItemProviderAdapterFactory extends CamelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public CamelItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelAtomBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelAtomBindingTypeItemProvider camelAtomBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelAtomBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelAtomBindingTypeAdapter() {
        if (camelAtomBindingTypeItemProvider == null) {
            camelAtomBindingTypeItemProvider = new CamelAtomBindingTypeItemProvider(this);
        }

        return camelAtomBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelBindingTypeItemProvider camelBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelBindingTypeAdapter() {
        if (camelBindingTypeItemProvider == null) {
            camelBindingTypeItemProvider = new CamelBindingTypeItemProvider(this);
        }

        return camelBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelDirectBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelDirectBindingTypeItemProvider camelDirectBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelDirectBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelDirectBindingTypeAdapter() {
        if (camelDirectBindingTypeItemProvider == null) {
            camelDirectBindingTypeItemProvider = new CamelDirectBindingTypeItemProvider(this);
        }

        return camelDirectBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelFileBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelFileBindingTypeItemProvider camelFileBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelFileBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelFileBindingTypeAdapter() {
        if (camelFileBindingTypeItemProvider == null) {
            camelFileBindingTypeItemProvider = new CamelFileBindingTypeItemProvider(this);
        }

        return camelFileBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelFtpBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelFtpBindingTypeItemProvider camelFtpBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelFtpBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelFtpBindingTypeAdapter() {
        if (camelFtpBindingTypeItemProvider == null) {
            camelFtpBindingTypeItemProvider = new CamelFtpBindingTypeItemProvider(this);
        }

        return camelFtpBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelFtpsBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelFtpsBindingTypeItemProvider camelFtpsBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelFtpsBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelFtpsBindingTypeAdapter() {
        if (camelFtpsBindingTypeItemProvider == null) {
            camelFtpsBindingTypeItemProvider = new CamelFtpsBindingTypeItemProvider(this);
        }

        return camelFtpsBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelImplementationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelImplementationTypeItemProvider camelImplementationTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelImplementationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelImplementationTypeAdapter() {
        if (camelImplementationTypeItemProvider == null) {
            camelImplementationTypeItemProvider = new CamelImplementationTypeItemProvider(this);
        }

        return camelImplementationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelJmsBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelJmsBindingTypeItemProvider camelJmsBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelJmsBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelJmsBindingTypeAdapter() {
        if (camelJmsBindingTypeItemProvider == null) {
            camelJmsBindingTypeItemProvider = new CamelJmsBindingTypeItemProvider(this);
        }

        return camelJmsBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelNettyUdpBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelNettyUdpBindingTypeItemProvider camelNettyUdpBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelNettyUdpBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelNettyUdpBindingTypeAdapter() {
        if (camelNettyUdpBindingTypeItemProvider == null) {
            camelNettyUdpBindingTypeItemProvider = new CamelNettyUdpBindingTypeItemProvider(this);
        }

        return camelNettyUdpBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelNettyTcpBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelNettyTcpBindingTypeItemProvider camelNettyTcpBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelNettyTcpBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelNettyTcpBindingTypeAdapter() {
        if (camelNettyTcpBindingTypeItemProvider == null) {
            camelNettyTcpBindingTypeItemProvider = new CamelNettyTcpBindingTypeItemProvider(this);
        }

        return camelNettyTcpBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelMockBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelMockBindingTypeItemProvider camelMockBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelMockBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelMockBindingTypeAdapter() {
        if (camelMockBindingTypeItemProvider == null) {
            camelMockBindingTypeItemProvider = new CamelMockBindingTypeItemProvider(this);
        }

        return camelMockBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelSedaBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelSedaBindingTypeItemProvider camelSedaBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelSedaBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelSedaBindingTypeAdapter() {
        if (camelSedaBindingTypeItemProvider == null) {
            camelSedaBindingTypeItemProvider = new CamelSedaBindingTypeItemProvider(this);
        }

        return camelSedaBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelTimerBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelTimerBindingTypeItemProvider camelTimerBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelTimerBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelTimerBindingTypeAdapter() {
        if (camelTimerBindingTypeItemProvider == null) {
            camelTimerBindingTypeItemProvider = new CamelTimerBindingTypeItemProvider(this);
        }

        return camelTimerBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelSftpBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelSftpBindingTypeItemProvider camelSftpBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelSftpBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelSftpBindingTypeAdapter() {
        if (camelSftpBindingTypeItemProvider == null) {
            camelSftpBindingTypeItemProvider = new CamelSftpBindingTypeItemProvider(this);
        }

        return camelSftpBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelContextMapperType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelContextMapperTypeItemProvider camelContextMapperTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelContextMapperType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelContextMapperTypeAdapter() {
        if (camelContextMapperTypeItemProvider == null) {
            camelContextMapperTypeItemProvider = new CamelContextMapperTypeItemProvider(this);
        }

        return camelContextMapperTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelMessageComposerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelMessageComposerTypeItemProvider camelMessageComposerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelMessageComposerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelMessageComposerTypeAdapter() {
        if (camelMessageComposerTypeItemProvider == null) {
            camelMessageComposerTypeItemProvider = new CamelMessageComposerTypeItemProvider(this);
        }

        return camelMessageComposerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.FileConsumerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FileConsumerTypeItemProvider fileConsumerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.FileConsumerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFileConsumerTypeAdapter() {
        if (fileConsumerTypeItemProvider == null) {
            fileConsumerTypeItemProvider = new FileConsumerTypeItemProvider(this);
        }

        return fileConsumerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.FileProducerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FileProducerTypeItemProvider fileProducerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.FileProducerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFileProducerTypeAdapter() {
        if (fileProducerTypeItemProvider == null) {
            fileProducerTypeItemProvider = new FileProducerTypeItemProvider(this);
        }

        return fileProducerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.JavaDSLType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JavaDSLTypeItemProvider javaDSLTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.JavaDSLType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJavaDSLTypeAdapter() {
        if (javaDSLTypeItemProvider == null) {
            javaDSLTypeItemProvider = new JavaDSLTypeItemProvider(this);
        }

        return javaDSLTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.XMLDSLType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XMLDSLTypeItemProvider xmldslTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.XMLDSLType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXMLDSLTypeAdapter() {
        if (xmldslTypeItemProvider == null) {
            xmldslTypeItemProvider = new XMLDSLTypeItemProvider(this);
        }

        return xmldslTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.ScheduledPollConsumerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ScheduledPollConsumerTypeItemProvider scheduledPollConsumerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.ScheduledPollConsumerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createScheduledPollConsumerTypeAdapter() {
        if (scheduledPollConsumerTypeItemProvider == null) {
            scheduledPollConsumerTypeItemProvider = new ScheduledPollConsumerTypeItemProvider(this);
        }

        return scheduledPollConsumerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.ScheduledBatchPollConsumerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ScheduledBatchPollConsumerTypeItemProvider scheduledBatchPollConsumerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.ScheduledBatchPollConsumerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createScheduledBatchPollConsumerTypeAdapter() {
        if (scheduledBatchPollConsumerTypeItemProvider == null) {
            scheduledBatchPollConsumerTypeItemProvider = new ScheduledBatchPollConsumerTypeItemProvider(this);
        }

        return scheduledBatchPollConsumerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.GenericFileConsumerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GenericFileConsumerTypeItemProvider genericFileConsumerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.GenericFileConsumerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGenericFileConsumerTypeAdapter() {
        if (genericFileConsumerTypeItemProvider == null) {
            genericFileConsumerTypeItemProvider = new GenericFileConsumerTypeItemProvider(this);
        }

        return genericFileConsumerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.GenericFileProducerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GenericFileProducerTypeItemProvider genericFileProducerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.GenericFileProducerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGenericFileProducerTypeAdapter() {
        if (genericFileProducerTypeItemProvider == null) {
            genericFileProducerTypeItemProvider = new GenericFileProducerTypeItemProvider(this);
        }

        return genericFileProducerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.RemoteFileConsumerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemoteFileConsumerTypeItemProvider remoteFileConsumerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.RemoteFileConsumerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemoteFileConsumerTypeAdapter() {
        if (remoteFileConsumerTypeItemProvider == null) {
            remoteFileConsumerTypeItemProvider = new RemoteFileConsumerTypeItemProvider(this);
        }

        return remoteFileConsumerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.RemoteFileProducerType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemoteFileProducerTypeItemProvider remoteFileProducerTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.RemoteFileProducerType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemoteFileProducerTypeAdapter() {
        if (remoteFileProducerTypeItemProvider == null) {
            remoteFileProducerTypeItemProvider = new RemoteFileProducerTypeItemProvider(this);
        }

        return remoteFileProducerTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelQuartzBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelQuartzBindingTypeItemProvider camelQuartzBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelQuartzBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelQuartzBindingTypeAdapter() {
        if (camelQuartzBindingTypeItemProvider == null) {
            camelQuartzBindingTypeItemProvider = new CamelQuartzBindingTypeItemProvider(this);
        }

        return camelQuartzBindingTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.camel.CamelSqlBindingType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelSqlBindingTypeItemProvider camelSqlBindingTypeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.camel.CamelSqlBindingType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelSqlBindingTypeAdapter() {
        if (camelSqlBindingTypeItemProvider == null) {
            camelSqlBindingTypeItemProvider = new CamelSqlBindingTypeItemProvider(this);
        }

        return camelSqlBindingTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (camelBindingTypeItemProvider != null) camelBindingTypeItemProvider.dispose();
        if (camelFileBindingTypeItemProvider != null) camelFileBindingTypeItemProvider.dispose();
        if (camelFtpBindingTypeItemProvider != null) camelFtpBindingTypeItemProvider.dispose();
        if (camelFtpsBindingTypeItemProvider != null) camelFtpsBindingTypeItemProvider.dispose();
        if (camelSftpBindingTypeItemProvider != null) camelSftpBindingTypeItemProvider.dispose();
        if (camelAtomBindingTypeItemProvider != null) camelAtomBindingTypeItemProvider.dispose();
        if (camelDirectBindingTypeItemProvider != null) camelDirectBindingTypeItemProvider.dispose();
        if (camelTimerBindingTypeItemProvider != null) camelTimerBindingTypeItemProvider.dispose();
        if (camelSedaBindingTypeItemProvider != null) camelSedaBindingTypeItemProvider.dispose();
        if (camelMockBindingTypeItemProvider != null) camelMockBindingTypeItemProvider.dispose();
        if (camelNettyTcpBindingTypeItemProvider != null) camelNettyTcpBindingTypeItemProvider.dispose();
        if (camelNettyUdpBindingTypeItemProvider != null) camelNettyUdpBindingTypeItemProvider.dispose();
        if (camelQuartzBindingTypeItemProvider != null) camelQuartzBindingTypeItemProvider.dispose();
        if (camelJmsBindingTypeItemProvider != null) camelJmsBindingTypeItemProvider.dispose();
        if (camelSqlBindingTypeItemProvider != null) camelSqlBindingTypeItemProvider.dispose();
        if (javaDSLTypeItemProvider != null) javaDSLTypeItemProvider.dispose();
        if (xmldslTypeItemProvider != null) xmldslTypeItemProvider.dispose();
        if (camelImplementationTypeItemProvider != null) camelImplementationTypeItemProvider.dispose();
        if (scheduledPollConsumerTypeItemProvider != null) scheduledPollConsumerTypeItemProvider.dispose();
        if (scheduledBatchPollConsumerTypeItemProvider != null) scheduledBatchPollConsumerTypeItemProvider.dispose();
        if (fileConsumerTypeItemProvider != null) fileConsumerTypeItemProvider.dispose();
        if (fileProducerTypeItemProvider != null) fileProducerTypeItemProvider.dispose();
        if (remoteFileConsumerTypeItemProvider != null) remoteFileConsumerTypeItemProvider.dispose();
        if (remoteFileProducerTypeItemProvider != null) remoteFileProducerTypeItemProvider.dispose();
        if (genericFileConsumerTypeItemProvider != null) genericFileConsumerTypeItemProvider.dispose();
        if (genericFileProducerTypeItemProvider != null) genericFileProducerTypeItemProvider.dispose();
        if (documentRootItemProvider != null) documentRootItemProvider.dispose();
        if (camelContextMapperTypeItemProvider != null) camelContextMapperTypeItemProvider.dispose();
        if (camelMessageComposerTypeItemProvider != null) camelMessageComposerTypeItemProvider.dispose();
    }

}
