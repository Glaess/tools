/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.switchyard.tools.models.switchyard1_0.spring.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.switchyard.tools.models.switchyard1_0.spring.util.SpringAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SpringItemProviderAdapterFactory extends SpringAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public SpringItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.AggregateDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AggregateDefinitionItemProvider aggregateDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.AggregateDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAggregateDefinitionAdapter() {
        if (aggregateDefinitionItemProvider == null) {
            aggregateDefinitionItemProvider = new AggregateDefinitionItemProvider(this);
        }

        return aggregateDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.AliasEntry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AliasEntryItemProvider aliasEntryItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.AliasEntry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAliasEntryAdapter() {
        if (aliasEntryItemProvider == null) {
            aliasEntryItemProvider = new AliasEntryItemProvider(this);
        }

        return aliasEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.AliasList} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AliasListItemProvider aliasListItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.AliasList}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAliasListAdapter() {
        if (aliasListItemProvider == null) {
            aliasListItemProvider = new AliasListItemProvider(this);
        }

        return aliasListItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.AopDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AopDefinitionItemProvider aopDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.AopDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAopDefinitionAdapter() {
        if (aopDefinitionItemProvider == null) {
            aopDefinitionItemProvider = new AopDefinitionItemProvider(this);
        }

        return aopDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.BatchResequencerConfig} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BatchResequencerConfigItemProvider batchResequencerConfigItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.BatchResequencerConfig}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBatchResequencerConfigAdapter() {
        if (batchResequencerConfigItemProvider == null) {
            batchResequencerConfigItemProvider = new BatchResequencerConfigItemProvider(this);
        }

        return batchResequencerConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.BeanDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BeanDefinitionItemProvider beanDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.BeanDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBeanDefinitionAdapter() {
        if (beanDefinitionItemProvider == null) {
            beanDefinitionItemProvider = new BeanDefinitionItemProvider(this);
        }

        return beanDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.BindyDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BindyDataFormatItemProvider bindyDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.BindyDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBindyDataFormatAdapter() {
        if (bindyDataFormatItemProvider == null) {
            bindyDataFormatItemProvider = new BindyDataFormatItemProvider(this);
        }

        return bindyDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelBeanPostProcessor} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelBeanPostProcessorItemProvider camelBeanPostProcessorItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelBeanPostProcessor}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelBeanPostProcessorAdapter() {
        if (camelBeanPostProcessorItemProvider == null) {
            camelBeanPostProcessorItemProvider = new CamelBeanPostProcessorItemProvider(this);
        }

        return camelBeanPostProcessorItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelConsumerTemplateFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelConsumerTemplateFactoryBeanItemProvider camelConsumerTemplateFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelConsumerTemplateFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelConsumerTemplateFactoryBeanAdapter() {
        if (camelConsumerTemplateFactoryBeanItemProvider == null) {
            camelConsumerTemplateFactoryBeanItemProvider = new CamelConsumerTemplateFactoryBeanItemProvider(this);
        }

        return camelConsumerTemplateFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelContextFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelContextFactoryBeanItemProvider camelContextFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelContextFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelContextFactoryBeanAdapter() {
        if (camelContextFactoryBeanItemProvider == null) {
            camelContextFactoryBeanItemProvider = new CamelContextFactoryBeanItemProvider(this);
        }

        return camelContextFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelEndpointFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelEndpointFactoryBeanItemProvider camelEndpointFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelEndpointFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelEndpointFactoryBeanAdapter() {
        if (camelEndpointFactoryBeanItemProvider == null) {
            camelEndpointFactoryBeanItemProvider = new CamelEndpointFactoryBeanItemProvider(this);
        }

        return camelEndpointFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelJMXAgentDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelJMXAgentDefinitionItemProvider camelJMXAgentDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelJMXAgentDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelJMXAgentDefinitionAdapter() {
        if (camelJMXAgentDefinitionItemProvider == null) {
            camelJMXAgentDefinitionItemProvider = new CamelJMXAgentDefinitionItemProvider(this);
        }

        return camelJMXAgentDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelProducerTemplateFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelProducerTemplateFactoryBeanItemProvider camelProducerTemplateFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelProducerTemplateFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelProducerTemplateFactoryBeanAdapter() {
        if (camelProducerTemplateFactoryBeanItemProvider == null) {
            camelProducerTemplateFactoryBeanItemProvider = new CamelProducerTemplateFactoryBeanItemProvider(this);
        }

        return camelProducerTemplateFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelPropertyPlaceholderDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelPropertyPlaceholderDefinitionItemProvider camelPropertyPlaceholderDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelPropertyPlaceholderDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelPropertyPlaceholderDefinitionAdapter() {
        if (camelPropertyPlaceholderDefinitionItemProvider == null) {
            camelPropertyPlaceholderDefinitionItemProvider = new CamelPropertyPlaceholderDefinitionItemProvider(this);
        }

        return camelPropertyPlaceholderDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelProxyFactoryDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelProxyFactoryDefinitionItemProvider camelProxyFactoryDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelProxyFactoryDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelProxyFactoryDefinitionAdapter() {
        if (camelProxyFactoryDefinitionItemProvider == null) {
            camelProxyFactoryDefinitionItemProvider = new CamelProxyFactoryDefinitionItemProvider(this);
        }

        return camelProxyFactoryDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelRedeliveryPolicyFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelRedeliveryPolicyFactoryBeanItemProvider camelRedeliveryPolicyFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelRedeliveryPolicyFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelRedeliveryPolicyFactoryBeanAdapter() {
        if (camelRedeliveryPolicyFactoryBeanItemProvider == null) {
            camelRedeliveryPolicyFactoryBeanItemProvider = new CamelRedeliveryPolicyFactoryBeanItemProvider(this);
        }

        return camelRedeliveryPolicyFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelRouteContextFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelRouteContextFactoryBeanItemProvider camelRouteContextFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelRouteContextFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelRouteContextFactoryBeanAdapter() {
        if (camelRouteContextFactoryBeanItemProvider == null) {
            camelRouteContextFactoryBeanItemProvider = new CamelRouteContextFactoryBeanItemProvider(this);
        }

        return camelRouteContextFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelServiceExporterDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelServiceExporterDefinitionItemProvider camelServiceExporterDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelServiceExporterDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelServiceExporterDefinitionAdapter() {
        if (camelServiceExporterDefinitionItemProvider == null) {
            camelServiceExporterDefinitionItemProvider = new CamelServiceExporterDefinitionItemProvider(this);
        }

        return camelServiceExporterDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CamelThreadPoolFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CamelThreadPoolFactoryBeanItemProvider camelThreadPoolFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CamelThreadPoolFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCamelThreadPoolFactoryBeanAdapter() {
        if (camelThreadPoolFactoryBeanItemProvider == null) {
            camelThreadPoolFactoryBeanItemProvider = new CamelThreadPoolFactoryBeanItemProvider(this);
        }

        return camelThreadPoolFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CastorDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CastorDataFormatItemProvider castorDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CastorDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCastorDataFormatAdapter() {
        if (castorDataFormatItemProvider == null) {
            castorDataFormatItemProvider = new CastorDataFormatItemProvider(this);
        }

        return castorDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CatchDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CatchDefinitionItemProvider catchDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CatchDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCatchDefinitionAdapter() {
        if (catchDefinitionItemProvider == null) {
            catchDefinitionItemProvider = new CatchDefinitionItemProvider(this);
        }

        return catchDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ChoiceDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ChoiceDefinitionItemProvider choiceDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ChoiceDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createChoiceDefinitionAdapter() {
        if (choiceDefinitionItemProvider == null) {
            choiceDefinitionItemProvider = new ChoiceDefinitionItemProvider(this);
        }

        return choiceDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CipherSuitesParameters} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CipherSuitesParametersItemProvider cipherSuitesParametersItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CipherSuitesParameters}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCipherSuitesParametersAdapter() {
        if (cipherSuitesParametersItemProvider == null) {
            cipherSuitesParametersItemProvider = new CipherSuitesParametersItemProvider(this);
        }

        return cipherSuitesParametersItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ConstantExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConstantExpressionItemProvider constantExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ConstantExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConstantExpressionAdapter() {
        if (constantExpressionItemProvider == null) {
            constantExpressionItemProvider = new ConstantExpressionItemProvider(this);
        }

        return constantExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.Constants} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConstantsItemProvider constantsItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.Constants}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConstantsAdapter() {
        if (constantsItemProvider == null) {
            constantsItemProvider = new ConstantsItemProvider(this);
        }

        return constantsItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ContextScanDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ContextScanDefinitionItemProvider contextScanDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ContextScanDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createContextScanDefinitionAdapter() {
        if (contextScanDefinitionItemProvider == null) {
            contextScanDefinitionItemProvider = new ContextScanDefinitionItemProvider(this);
        }

        return contextScanDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ConvertBodyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConvertBodyDefinitionItemProvider convertBodyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ConvertBodyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConvertBodyDefinitionAdapter() {
        if (convertBodyDefinitionItemProvider == null) {
            convertBodyDefinitionItemProvider = new ConvertBodyDefinitionItemProvider(this);
        }

        return convertBodyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ConverterEntry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConverterEntryItemProvider converterEntryItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ConverterEntry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConverterEntryAdapter() {
        if (converterEntryItemProvider == null) {
            converterEntryItemProvider = new ConverterEntryItemProvider(this);
        }

        return converterEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ConverterList} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConverterListItemProvider converterListItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ConverterList}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConverterListAdapter() {
        if (converterListItemProvider == null) {
            converterListItemProvider = new ConverterListItemProvider(this);
        }

        return converterListItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CryptoDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CryptoDataFormatItemProvider cryptoDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CryptoDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCryptoDataFormatAdapter() {
        if (cryptoDataFormatItemProvider == null) {
            cryptoDataFormatItemProvider = new CryptoDataFormatItemProvider(this);
        }

        return cryptoDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CsvDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CsvDataFormatItemProvider csvDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CsvDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCsvDataFormatAdapter() {
        if (csvDataFormatItemProvider == null) {
            csvDataFormatItemProvider = new CsvDataFormatItemProvider(this);
        }

        return csvDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CustomDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CustomDataFormatItemProvider customDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CustomDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCustomDataFormatAdapter() {
        if (customDataFormatItemProvider == null) {
            customDataFormatItemProvider = new CustomDataFormatItemProvider(this);
        }

        return customDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.CustomLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CustomLoadBalancerDefinitionItemProvider customLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.CustomLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCustomLoadBalancerDefinitionAdapter() {
        if (customLoadBalancerDefinitionItemProvider == null) {
            customLoadBalancerDefinitionItemProvider = new CustomLoadBalancerDefinitionItemProvider(this);
        }

        return customLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.DataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataFormatItemProvider dataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.DataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataFormatAdapter() {
        if (dataFormatItemProvider == null) {
            dataFormatItemProvider = new DataFormatItemProvider(this);
        }

        return dataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.DataFormatsDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DataFormatsDefinitionItemProvider dataFormatsDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.DataFormatsDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDataFormatsDefinitionAdapter() {
        if (dataFormatsDefinitionItemProvider == null) {
            dataFormatsDefinitionItemProvider = new DataFormatsDefinitionItemProvider(this);
        }

        return dataFormatsDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.DelayDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DelayDefinitionItemProvider delayDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.DelayDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDelayDefinitionAdapter() {
        if (delayDefinitionItemProvider == null) {
            delayDefinitionItemProvider = new DelayDefinitionItemProvider(this);
        }

        return delayDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.DescriptionDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DescriptionDefinitionItemProvider descriptionDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.DescriptionDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDescriptionDefinitionAdapter() {
        if (descriptionDefinitionItemProvider == null) {
            descriptionDefinitionItemProvider = new DescriptionDefinitionItemProvider(this);
        }

        return descriptionDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter() {
        if (documentRootItemProvider == null) {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.DynamicRouterDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DynamicRouterDefinitionItemProvider dynamicRouterDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.DynamicRouterDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDynamicRouterDefinitionAdapter() {
        if (dynamicRouterDefinitionItemProvider == null) {
            dynamicRouterDefinitionItemProvider = new DynamicRouterDefinitionItemProvider(this);
        }

        return dynamicRouterDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ElExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElExpressionItemProvider elExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ElExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElExpressionAdapter() {
        if (elExpressionItemProvider == null) {
            elExpressionItemProvider = new ElExpressionItemProvider(this);
        }

        return elExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.EnrichDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EnrichDefinitionItemProvider enrichDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.EnrichDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEnrichDefinitionAdapter() {
        if (enrichDefinitionItemProvider == null) {
            enrichDefinitionItemProvider = new EnrichDefinitionItemProvider(this);
        }

        return enrichDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ErrorHandlerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ErrorHandlerDefinitionItemProvider errorHandlerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ErrorHandlerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createErrorHandlerDefinitionAdapter() {
        if (errorHandlerDefinitionItemProvider == null) {
            errorHandlerDefinitionItemProvider = new ErrorHandlerDefinitionItemProvider(this);
        }

        return errorHandlerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.Expression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExpressionItemProvider expressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.Expression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExpressionAdapter() {
        if (expressionItemProvider == null) {
            expressionItemProvider = new ExpressionItemProvider(this);
        }

        return expressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ExpressionNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExpressionNodeItemProvider expressionNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ExpressionNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExpressionNodeAdapter() {
        if (expressionNodeItemProvider == null) {
            expressionNodeItemProvider = new ExpressionNodeItemProvider(this);
        }

        return expressionNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ExpressionNodeHelper} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExpressionNodeHelperItemProvider expressionNodeHelperItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ExpressionNodeHelper}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExpressionNodeHelperAdapter() {
        if (expressionNodeHelperItemProvider == null) {
            expressionNodeHelperItemProvider = new ExpressionNodeHelperItemProvider(this);
        }

        return expressionNodeHelperItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ExpressionSubElementDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExpressionSubElementDefinitionItemProvider expressionSubElementDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ExpressionSubElementDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExpressionSubElementDefinitionAdapter() {
        if (expressionSubElementDefinitionItemProvider == null) {
            expressionSubElementDefinitionItemProvider = new ExpressionSubElementDefinitionItemProvider(this);
        }

        return expressionSubElementDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.FailoverLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FailoverLoadBalancerDefinitionItemProvider failoverLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.FailoverLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFailoverLoadBalancerDefinitionAdapter() {
        if (failoverLoadBalancerDefinitionItemProvider == null) {
            failoverLoadBalancerDefinitionItemProvider = new FailoverLoadBalancerDefinitionItemProvider(this);
        }

        return failoverLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.FilterDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FilterDefinitionItemProvider filterDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.FilterDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFilterDefinitionAdapter() {
        if (filterDefinitionItemProvider == null) {
            filterDefinitionItemProvider = new FilterDefinitionItemProvider(this);
        }

        return filterDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.FilterParameters} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FilterParametersItemProvider filterParametersItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.FilterParameters}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFilterParametersAdapter() {
        if (filterParametersItemProvider == null) {
            filterParametersItemProvider = new FilterParametersItemProvider(this);
        }

        return filterParametersItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.FinallyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FinallyDefinitionItemProvider finallyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.FinallyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFinallyDefinitionAdapter() {
        if (finallyDefinitionItemProvider == null) {
            finallyDefinitionItemProvider = new FinallyDefinitionItemProvider(this);
        }

        return finallyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.FlatpackDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FlatpackDataFormatItemProvider flatpackDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.FlatpackDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFlatpackDataFormatAdapter() {
        if (flatpackDataFormatItemProvider == null) {
            flatpackDataFormatItemProvider = new FlatpackDataFormatItemProvider(this);
        }

        return flatpackDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.FromDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected FromDefinitionItemProvider fromDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.FromDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createFromDefinitionAdapter() {
        if (fromDefinitionItemProvider == null) {
            fromDefinitionItemProvider = new FromDefinitionItemProvider(this);
        }

        return fromDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.GroovyExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GroovyExpressionItemProvider groovyExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.GroovyExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGroovyExpressionAdapter() {
        if (groovyExpressionItemProvider == null) {
            groovyExpressionItemProvider = new GroovyExpressionItemProvider(this);
        }

        return groovyExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.GzipDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GzipDataFormatItemProvider gzipDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.GzipDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGzipDataFormatAdapter() {
        if (gzipDataFormatItemProvider == null) {
            gzipDataFormatItemProvider = new GzipDataFormatItemProvider(this);
        }

        return gzipDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.HeaderExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected HeaderExpressionItemProvider headerExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.HeaderExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createHeaderExpressionAdapter() {
        if (headerExpressionItemProvider == null) {
            headerExpressionItemProvider = new HeaderExpressionItemProvider(this);
        }

        return headerExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.Hl7DataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Hl7DataFormatItemProvider hl7DataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.Hl7DataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createHl7DataFormatAdapter() {
        if (hl7DataFormatItemProvider == null) {
            hl7DataFormatItemProvider = new Hl7DataFormatItemProvider(this);
        }

        return hl7DataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.IdempotentConsumerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IdempotentConsumerDefinitionItemProvider idempotentConsumerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.IdempotentConsumerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createIdempotentConsumerDefinitionAdapter() {
        if (idempotentConsumerDefinitionItemProvider == null) {
            idempotentConsumerDefinitionItemProvider = new IdempotentConsumerDefinitionItemProvider(this);
        }

        return idempotentConsumerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ImplicitCollectionEntry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ImplicitCollectionEntryItemProvider implicitCollectionEntryItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ImplicitCollectionEntry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createImplicitCollectionEntryAdapter() {
        if (implicitCollectionEntryItemProvider == null) {
            implicitCollectionEntryItemProvider = new ImplicitCollectionEntryItemProvider(this);
        }

        return implicitCollectionEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ImplicitCollectionList} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ImplicitCollectionListItemProvider implicitCollectionListItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ImplicitCollectionList}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createImplicitCollectionListAdapter() {
        if (implicitCollectionListItemProvider == null) {
            implicitCollectionListItemProvider = new ImplicitCollectionListItemProvider(this);
        }

        return implicitCollectionListItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.InOnlyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InOnlyDefinitionItemProvider inOnlyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.InOnlyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInOnlyDefinitionAdapter() {
        if (inOnlyDefinitionItemProvider == null) {
            inOnlyDefinitionItemProvider = new InOnlyDefinitionItemProvider(this);
        }

        return inOnlyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.InOutDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InOutDefinitionItemProvider inOutDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.InOutDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInOutDefinitionAdapter() {
        if (inOutDefinitionItemProvider == null) {
            inOutDefinitionItemProvider = new InOutDefinitionItemProvider(this);
        }

        return inOutDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.InterceptDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterceptDefinitionItemProvider interceptDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.InterceptDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterceptDefinitionAdapter() {
        if (interceptDefinitionItemProvider == null) {
            interceptDefinitionItemProvider = new InterceptDefinitionItemProvider(this);
        }

        return interceptDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.InterceptFromDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterceptFromDefinitionItemProvider interceptFromDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.InterceptFromDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterceptFromDefinitionAdapter() {
        if (interceptFromDefinitionItemProvider == null) {
            interceptFromDefinitionItemProvider = new InterceptFromDefinitionItemProvider(this);
        }

        return interceptFromDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.InterceptSendToEndpointDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InterceptSendToEndpointDefinitionItemProvider interceptSendToEndpointDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.InterceptSendToEndpointDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInterceptSendToEndpointDefinitionAdapter() {
        if (interceptSendToEndpointDefinitionItemProvider == null) {
            interceptSendToEndpointDefinitionItemProvider = new InterceptSendToEndpointDefinitionItemProvider(this);
        }

        return interceptSendToEndpointDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.JavaScriptExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JavaScriptExpressionItemProvider javaScriptExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.JavaScriptExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJavaScriptExpressionAdapter() {
        if (javaScriptExpressionItemProvider == null) {
            javaScriptExpressionItemProvider = new JavaScriptExpressionItemProvider(this);
        }

        return javaScriptExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.JaxbDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JaxbDataFormatItemProvider jaxbDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.JaxbDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJaxbDataFormatAdapter() {
        if (jaxbDataFormatItemProvider == null) {
            jaxbDataFormatItemProvider = new JaxbDataFormatItemProvider(this);
        }

        return jaxbDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.JibxDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JibxDataFormatItemProvider jibxDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.JibxDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJibxDataFormatAdapter() {
        if (jibxDataFormatItemProvider == null) {
            jibxDataFormatItemProvider = new JibxDataFormatItemProvider(this);
        }

        return jibxDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.JsonDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JsonDataFormatItemProvider jsonDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.JsonDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJsonDataFormatAdapter() {
        if (jsonDataFormatItemProvider == null) {
            jsonDataFormatItemProvider = new JsonDataFormatItemProvider(this);
        }

        return jsonDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.JxPathExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JxPathExpressionItemProvider jxPathExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.JxPathExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJxPathExpressionAdapter() {
        if (jxPathExpressionItemProvider == null) {
            jxPathExpressionItemProvider = new JxPathExpressionItemProvider(this);
        }

        return jxPathExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.KeyManagersParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected KeyManagersParametersFactoryBeanItemProvider keyManagersParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.KeyManagersParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createKeyManagersParametersFactoryBeanAdapter() {
        if (keyManagersParametersFactoryBeanItemProvider == null) {
            keyManagersParametersFactoryBeanItemProvider = new KeyManagersParametersFactoryBeanItemProvider(this);
        }

        return keyManagersParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.KeyStoreParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected KeyStoreParametersFactoryBeanItemProvider keyStoreParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.KeyStoreParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createKeyStoreParametersFactoryBeanAdapter() {
        if (keyStoreParametersFactoryBeanItemProvider == null) {
            keyStoreParametersFactoryBeanItemProvider = new KeyStoreParametersFactoryBeanItemProvider(this);
        }

        return keyStoreParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.LanguageExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LanguageExpressionItemProvider languageExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.LanguageExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLanguageExpressionAdapter() {
        if (languageExpressionItemProvider == null) {
            languageExpressionItemProvider = new LanguageExpressionItemProvider(this);
        }

        return languageExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.LoadBalanceDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LoadBalanceDefinitionItemProvider loadBalanceDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.LoadBalanceDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLoadBalanceDefinitionAdapter() {
        if (loadBalanceDefinitionItemProvider == null) {
            loadBalanceDefinitionItemProvider = new LoadBalanceDefinitionItemProvider(this);
        }

        return loadBalanceDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.LoadBalancer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LoadBalancerItemProvider loadBalancerItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.LoadBalancer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLoadBalancerAdapter() {
        if (loadBalancerItemProvider == null) {
            loadBalancerItemProvider = new LoadBalancerItemProvider(this);
        }

        return loadBalancerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.LogDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LogDefinitionItemProvider logDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.LogDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLogDefinitionAdapter() {
        if (logDefinitionItemProvider == null) {
            logDefinitionItemProvider = new LogDefinitionItemProvider(this);
        }

        return logDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.LoopDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LoopDefinitionItemProvider loopDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.LoopDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLoopDefinitionAdapter() {
        if (loopDefinitionItemProvider == null) {
            loopDefinitionItemProvider = new LoopDefinitionItemProvider(this);
        }

        return loopDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.MarshalDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MarshalDefinitionItemProvider marshalDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.MarshalDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMarshalDefinitionAdapter() {
        if (marshalDefinitionItemProvider == null) {
            marshalDefinitionItemProvider = new MarshalDefinitionItemProvider(this);
        }

        return marshalDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.MethodCallExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MethodCallExpressionItemProvider methodCallExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.MethodCallExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMethodCallExpressionAdapter() {
        if (methodCallExpressionItemProvider == null) {
            methodCallExpressionItemProvider = new MethodCallExpressionItemProvider(this);
        }

        return methodCallExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ModelHelper} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModelHelperItemProvider modelHelperItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ModelHelper}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModelHelperAdapter() {
        if (modelHelperItemProvider == null) {
            modelHelperItemProvider = new ModelHelperItemProvider(this);
        }

        return modelHelperItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.MulticastDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MulticastDefinitionItemProvider multicastDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.MulticastDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMulticastDefinitionAdapter() {
        if (multicastDefinitionItemProvider == null) {
            multicastDefinitionItemProvider = new MulticastDefinitionItemProvider(this);
        }

        return multicastDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.MvelExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MvelExpressionItemProvider mvelExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.MvelExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMvelExpressionAdapter() {
        if (mvelExpressionItemProvider == null) {
            mvelExpressionItemProvider = new MvelExpressionItemProvider(this);
        }

        return mvelExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.NodeFactory} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeFactoryItemProvider nodeFactoryItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.NodeFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeFactoryAdapter() {
        if (nodeFactoryItemProvider == null) {
            nodeFactoryItemProvider = new NodeFactoryItemProvider(this);
        }

        return nodeFactoryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.NoOutputExpressionNode} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NoOutputExpressionNodeItemProvider noOutputExpressionNodeItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.NoOutputExpressionNode}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNoOutputExpressionNodeAdapter() {
        if (noOutputExpressionNodeItemProvider == null) {
            noOutputExpressionNodeItemProvider = new NoOutputExpressionNodeItemProvider(this);
        }

        return noOutputExpressionNodeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.OgnlExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OgnlExpressionItemProvider ognlExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.OgnlExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOgnlExpressionAdapter() {
        if (ognlExpressionItemProvider == null) {
            ognlExpressionItemProvider = new OgnlExpressionItemProvider(this);
        }

        return ognlExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.OmitFieldEntry} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OmitFieldEntryItemProvider omitFieldEntryItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.OmitFieldEntry}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOmitFieldEntryAdapter() {
        if (omitFieldEntryItemProvider == null) {
            omitFieldEntryItemProvider = new OmitFieldEntryItemProvider(this);
        }

        return omitFieldEntryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.OmitFieldList} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OmitFieldListItemProvider omitFieldListItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.OmitFieldList}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOmitFieldListAdapter() {
        if (omitFieldListItemProvider == null) {
            omitFieldListItemProvider = new OmitFieldListItemProvider(this);
        }

        return omitFieldListItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.OnCompletionDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OnCompletionDefinitionItemProvider onCompletionDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.OnCompletionDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOnCompletionDefinitionAdapter() {
        if (onCompletionDefinitionItemProvider == null) {
            onCompletionDefinitionItemProvider = new OnCompletionDefinitionItemProvider(this);
        }

        return onCompletionDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.OnExceptionDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OnExceptionDefinitionItemProvider onExceptionDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.OnExceptionDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOnExceptionDefinitionAdapter() {
        if (onExceptionDefinitionItemProvider == null) {
            onExceptionDefinitionItemProvider = new OnExceptionDefinitionItemProvider(this);
        }

        return onExceptionDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.OtherwiseDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OtherwiseDefinitionItemProvider otherwiseDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.OtherwiseDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOtherwiseDefinitionAdapter() {
        if (otherwiseDefinitionItemProvider == null) {
            otherwiseDefinitionItemProvider = new OtherwiseDefinitionItemProvider(this);
        }

        return otherwiseDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.Output} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OutputItemProvider outputItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.Output}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOutputAdapter() {
        if (outputItemProvider == null) {
            outputItemProvider = new OutputItemProvider(this);
        }

        return outputItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PackageScanDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackageScanDefinitionItemProvider packageScanDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PackageScanDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackageScanDefinitionAdapter() {
        if (packageScanDefinitionItemProvider == null) {
            packageScanDefinitionItemProvider = new PackageScanDefinitionItemProvider(this);
        }

        return packageScanDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PhpExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PhpExpressionItemProvider phpExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PhpExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPhpExpressionAdapter() {
        if (phpExpressionItemProvider == null) {
            phpExpressionItemProvider = new PhpExpressionItemProvider(this);
        }

        return phpExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PipelineDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PipelineDefinitionItemProvider pipelineDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PipelineDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPipelineDefinitionAdapter() {
        if (pipelineDefinitionItemProvider == null) {
            pipelineDefinitionItemProvider = new PipelineDefinitionItemProvider(this);
        }

        return pipelineDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PgpDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PgpDataFormatItemProvider pgpDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PgpDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPgpDataFormatAdapter() {
        if (pgpDataFormatItemProvider == null) {
            pgpDataFormatItemProvider = new PgpDataFormatItemProvider(this);
        }

        return pgpDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PolicyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PolicyDefinitionItemProvider policyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PolicyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPolicyDefinitionAdapter() {
        if (policyDefinitionItemProvider == null) {
            policyDefinitionItemProvider = new PolicyDefinitionItemProvider(this);
        }

        return policyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PollEnrichDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PollEnrichDefinitionItemProvider pollEnrichDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PollEnrichDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPollEnrichDefinitionAdapter() {
        if (pollEnrichDefinitionItemProvider == null) {
            pollEnrichDefinitionItemProvider = new PollEnrichDefinitionItemProvider(this);
        }

        return pollEnrichDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ProcessDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProcessDefinitionItemProvider processDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ProcessDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProcessDefinitionAdapter() {
        if (processDefinitionItemProvider == null) {
            processDefinitionItemProvider = new ProcessDefinitionItemProvider(this);
        }

        return processDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ProcessorDefinitionHelper} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProcessorDefinitionHelperItemProvider processorDefinitionHelperItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ProcessorDefinitionHelper}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProcessorDefinitionHelperAdapter() {
        if (processorDefinitionHelperItemProvider == null) {
            processorDefinitionHelperItemProvider = new ProcessorDefinitionHelperItemProvider(this);
        }

        return processorDefinitionHelperItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PropertiesDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PropertiesDefinitionItemProvider propertiesDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PropertiesDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPropertiesDefinitionAdapter() {
        if (propertiesDefinitionItemProvider == null) {
            propertiesDefinitionItemProvider = new PropertiesDefinitionItemProvider(this);
        }

        return propertiesDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PropertyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PropertyDefinitionItemProvider propertyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PropertyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPropertyDefinitionAdapter() {
        if (propertyDefinitionItemProvider == null) {
            propertyDefinitionItemProvider = new PropertyDefinitionItemProvider(this);
        }

        return propertyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PropertyExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PropertyExpressionItemProvider propertyExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PropertyExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPropertyExpressionAdapter() {
        if (propertyExpressionItemProvider == null) {
            propertyExpressionItemProvider = new PropertyExpressionItemProvider(this);
        }

        return propertyExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ProtobufDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProtobufDataFormatItemProvider protobufDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ProtobufDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProtobufDataFormatAdapter() {
        if (protobufDataFormatItemProvider == null) {
            protobufDataFormatItemProvider = new ProtobufDataFormatItemProvider(this);
        }

        return protobufDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.PythonExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PythonExpressionItemProvider pythonExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.PythonExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPythonExpressionAdapter() {
        if (pythonExpressionItemProvider == null) {
            pythonExpressionItemProvider = new PythonExpressionItemProvider(this);
        }

        return pythonExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RandomLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RandomLoadBalancerDefinitionItemProvider randomLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RandomLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRandomLoadBalancerDefinitionAdapter() {
        if (randomLoadBalancerDefinitionItemProvider == null) {
            randomLoadBalancerDefinitionItemProvider = new RandomLoadBalancerDefinitionItemProvider(this);
        }

        return randomLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RecipientListDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RecipientListDefinitionItemProvider recipientListDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RecipientListDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRecipientListDefinitionAdapter() {
        if (recipientListDefinitionItemProvider == null) {
            recipientListDefinitionItemProvider = new RecipientListDefinitionItemProvider(this);
        }

        return recipientListDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RedeliveryPolicyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RedeliveryPolicyDefinitionItemProvider redeliveryPolicyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RedeliveryPolicyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRedeliveryPolicyDefinitionAdapter() {
        if (redeliveryPolicyDefinitionItemProvider == null) {
            redeliveryPolicyDefinitionItemProvider = new RedeliveryPolicyDefinitionItemProvider(this);
        }

        return redeliveryPolicyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RefExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RefExpressionItemProvider refExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RefExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRefExpressionAdapter() {
        if (refExpressionItemProvider == null) {
            refExpressionItemProvider = new RefExpressionItemProvider(this);
        }

        return refExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RemoveHeaderDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemoveHeaderDefinitionItemProvider removeHeaderDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RemoveHeaderDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemoveHeaderDefinitionAdapter() {
        if (removeHeaderDefinitionItemProvider == null) {
            removeHeaderDefinitionItemProvider = new RemoveHeaderDefinitionItemProvider(this);
        }

        return removeHeaderDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RemoveHeadersDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemoveHeadersDefinitionItemProvider removeHeadersDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RemoveHeadersDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemoveHeadersDefinitionAdapter() {
        if (removeHeadersDefinitionItemProvider == null) {
            removeHeadersDefinitionItemProvider = new RemoveHeadersDefinitionItemProvider(this);
        }

        return removeHeadersDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RemovePropertyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RemovePropertyDefinitionItemProvider removePropertyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RemovePropertyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRemovePropertyDefinitionAdapter() {
        if (removePropertyDefinitionItemProvider == null) {
            removePropertyDefinitionItemProvider = new RemovePropertyDefinitionItemProvider(this);
        }

        return removePropertyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ResequenceDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ResequenceDefinitionItemProvider resequenceDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ResequenceDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createResequenceDefinitionAdapter() {
        if (resequenceDefinitionItemProvider == null) {
            resequenceDefinitionItemProvider = new ResequenceDefinitionItemProvider(this);
        }

        return resequenceDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RollbackDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RollbackDefinitionItemProvider rollbackDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RollbackDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRollbackDefinitionAdapter() {
        if (rollbackDefinitionItemProvider == null) {
            rollbackDefinitionItemProvider = new RollbackDefinitionItemProvider(this);
        }

        return rollbackDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RoundRobinLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RoundRobinLoadBalancerDefinitionItemProvider roundRobinLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RoundRobinLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRoundRobinLoadBalancerDefinitionAdapter() {
        if (roundRobinLoadBalancerDefinitionItemProvider == null) {
            roundRobinLoadBalancerDefinitionItemProvider = new RoundRobinLoadBalancerDefinitionItemProvider(this);
        }

        return roundRobinLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RouteBuilderDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RouteBuilderDefinitionItemProvider routeBuilderDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RouteBuilderDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRouteBuilderDefinitionAdapter() {
        if (routeBuilderDefinitionItemProvider == null) {
            routeBuilderDefinitionItemProvider = new RouteBuilderDefinitionItemProvider(this);
        }

        return routeBuilderDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RouteContextRefDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RouteContextRefDefinitionItemProvider routeContextRefDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RouteContextRefDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRouteContextRefDefinitionAdapter() {
        if (routeContextRefDefinitionItemProvider == null) {
            routeContextRefDefinitionItemProvider = new RouteContextRefDefinitionItemProvider(this);
        }

        return routeContextRefDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RouteDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RouteDefinitionItemProvider routeDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RouteDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRouteDefinitionAdapter() {
        if (routeDefinitionItemProvider == null) {
            routeDefinitionItemProvider = new RouteDefinitionItemProvider(this);
        }

        return routeDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RouteDefinitionHelper} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RouteDefinitionHelperItemProvider routeDefinitionHelperItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RouteDefinitionHelper}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRouteDefinitionHelperAdapter() {
        if (routeDefinitionHelperItemProvider == null) {
            routeDefinitionHelperItemProvider = new RouteDefinitionHelperItemProvider(this);
        }

        return routeDefinitionHelperItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RoutesDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RoutesDefinitionItemProvider routesDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RoutesDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRoutesDefinitionAdapter() {
        if (routesDefinitionItemProvider == null) {
            routesDefinitionItemProvider = new RoutesDefinitionItemProvider(this);
        }

        return routesDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RoutingSlipDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RoutingSlipDefinitionItemProvider routingSlipDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RoutingSlipDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRoutingSlipDefinitionAdapter() {
        if (routingSlipDefinitionItemProvider == null) {
            routingSlipDefinitionItemProvider = new RoutingSlipDefinitionItemProvider(this);
        }

        return routingSlipDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RssDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RssDataFormatItemProvider rssDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RssDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRssDataFormatAdapter() {
        if (rssDataFormatItemProvider == null) {
            rssDataFormatItemProvider = new RssDataFormatItemProvider(this);
        }

        return rssDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.RubyExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RubyExpressionItemProvider rubyExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.RubyExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRubyExpressionAdapter() {
        if (rubyExpressionItemProvider == null) {
            rubyExpressionItemProvider = new RubyExpressionItemProvider(this);
        }

        return rubyExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SamplingDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SamplingDefinitionItemProvider samplingDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SamplingDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSamplingDefinitionAdapter() {
        if (samplingDefinitionItemProvider == null) {
            samplingDefinitionItemProvider = new SamplingDefinitionItemProvider(this);
        }

        return samplingDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SecureRandomParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SecureRandomParametersFactoryBeanItemProvider secureRandomParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SecureRandomParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSecureRandomParametersFactoryBeanAdapter() {
        if (secureRandomParametersFactoryBeanItemProvider == null) {
            secureRandomParametersFactoryBeanItemProvider = new SecureRandomParametersFactoryBeanItemProvider(this);
        }

        return secureRandomParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SecureSocketProtocolsParameters} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SecureSocketProtocolsParametersItemProvider secureSocketProtocolsParametersItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SecureSocketProtocolsParameters}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSecureSocketProtocolsParametersAdapter() {
        if (secureSocketProtocolsParametersItemProvider == null) {
            secureSocketProtocolsParametersItemProvider = new SecureSocketProtocolsParametersItemProvider(this);
        }

        return secureSocketProtocolsParametersItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SerializationDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SerializationDataFormatItemProvider serializationDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SerializationDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSerializationDataFormatAdapter() {
        if (serializationDataFormatItemProvider == null) {
            serializationDataFormatItemProvider = new SerializationDataFormatItemProvider(this);
        }

        return serializationDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SetBodyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetBodyDefinitionItemProvider setBodyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SetBodyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetBodyDefinitionAdapter() {
        if (setBodyDefinitionItemProvider == null) {
            setBodyDefinitionItemProvider = new SetBodyDefinitionItemProvider(this);
        }

        return setBodyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SetExchangePatternDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetExchangePatternDefinitionItemProvider setExchangePatternDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SetExchangePatternDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetExchangePatternDefinitionAdapter() {
        if (setExchangePatternDefinitionItemProvider == null) {
            setExchangePatternDefinitionItemProvider = new SetExchangePatternDefinitionItemProvider(this);
        }

        return setExchangePatternDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SetFaultBodyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetFaultBodyDefinitionItemProvider setFaultBodyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SetFaultBodyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetFaultBodyDefinitionAdapter() {
        if (setFaultBodyDefinitionItemProvider == null) {
            setFaultBodyDefinitionItemProvider = new SetFaultBodyDefinitionItemProvider(this);
        }

        return setFaultBodyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SetHeaderDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetHeaderDefinitionItemProvider setHeaderDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SetHeaderDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetHeaderDefinitionAdapter() {
        if (setHeaderDefinitionItemProvider == null) {
            setHeaderDefinitionItemProvider = new SetHeaderDefinitionItemProvider(this);
        }

        return setHeaderDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SetOutHeaderDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetOutHeaderDefinitionItemProvider setOutHeaderDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SetOutHeaderDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetOutHeaderDefinitionAdapter() {
        if (setOutHeaderDefinitionItemProvider == null) {
            setOutHeaderDefinitionItemProvider = new SetOutHeaderDefinitionItemProvider(this);
        }

        return setOutHeaderDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SetPropertyDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SetPropertyDefinitionItemProvider setPropertyDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SetPropertyDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSetPropertyDefinitionAdapter() {
        if (setPropertyDefinitionItemProvider == null) {
            setPropertyDefinitionItemProvider = new SetPropertyDefinitionItemProvider(this);
        }

        return setPropertyDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SimpleExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SimpleExpressionItemProvider simpleExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SimpleExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSimpleExpressionAdapter() {
        if (simpleExpressionItemProvider == null) {
            simpleExpressionItemProvider = new SimpleExpressionItemProvider(this);
        }

        return simpleExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SoapJaxbDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SoapJaxbDataFormatItemProvider soapJaxbDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SoapJaxbDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSoapJaxbDataFormatAdapter() {
        if (soapJaxbDataFormatItemProvider == null) {
            soapJaxbDataFormatItemProvider = new SoapJaxbDataFormatItemProvider(this);
        }

        return soapJaxbDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SortDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SortDefinitionItemProvider sortDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SortDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSortDefinitionAdapter() {
        if (sortDefinitionItemProvider == null) {
            sortDefinitionItemProvider = new SortDefinitionItemProvider(this);
        }

        return sortDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SpELExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SpELExpressionItemProvider spELExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SpELExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSpELExpressionAdapter() {
        if (spELExpressionItemProvider == null) {
            spELExpressionItemProvider = new SpELExpressionItemProvider(this);
        }

        return spELExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SplitDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SplitDefinitionItemProvider splitDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SplitDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSplitDefinitionAdapter() {
        if (splitDefinitionItemProvider == null) {
            splitDefinitionItemProvider = new SplitDefinitionItemProvider(this);
        }

        return splitDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SqlExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SqlExpressionItemProvider sqlExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SqlExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSqlExpressionAdapter() {
        if (sqlExpressionItemProvider == null) {
            sqlExpressionItemProvider = new SqlExpressionItemProvider(this);
        }

        return sqlExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SslContextClientParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SslContextClientParametersFactoryBeanItemProvider sslContextClientParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SslContextClientParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSslContextClientParametersFactoryBeanAdapter() {
        if (sslContextClientParametersFactoryBeanItemProvider == null) {
            sslContextClientParametersFactoryBeanItemProvider = new SslContextClientParametersFactoryBeanItemProvider(this);
        }

        return sslContextClientParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SslContextParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SslContextParametersFactoryBeanItemProvider sslContextParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SslContextParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSslContextParametersFactoryBeanAdapter() {
        if (sslContextParametersFactoryBeanItemProvider == null) {
            sslContextParametersFactoryBeanItemProvider = new SslContextParametersFactoryBeanItemProvider(this);
        }

        return sslContextParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SslContextServerParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SslContextServerParametersFactoryBeanItemProvider sslContextServerParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SslContextServerParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSslContextServerParametersFactoryBeanAdapter() {
        if (sslContextServerParametersFactoryBeanItemProvider == null) {
            sslContextServerParametersFactoryBeanItemProvider = new SslContextServerParametersFactoryBeanItemProvider(this);
        }

        return sslContextServerParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.StickyLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StickyLoadBalancerDefinitionItemProvider stickyLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.StickyLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStickyLoadBalancerDefinitionAdapter() {
        if (stickyLoadBalancerDefinitionItemProvider == null) {
            stickyLoadBalancerDefinitionItemProvider = new StickyLoadBalancerDefinitionItemProvider(this);
        }

        return stickyLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.StopDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StopDefinitionItemProvider stopDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.StopDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStopDefinitionAdapter() {
        if (stopDefinitionItemProvider == null) {
            stopDefinitionItemProvider = new StopDefinitionItemProvider(this);
        }

        return stopDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.StreamResequencerConfig} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StreamResequencerConfigItemProvider streamResequencerConfigItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.StreamResequencerConfig}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStreamResequencerConfigAdapter() {
        if (streamResequencerConfigItemProvider == null) {
            streamResequencerConfigItemProvider = new StreamResequencerConfigItemProvider(this);
        }

        return streamResequencerConfigItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.StringDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StringDataFormatItemProvider stringDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.StringDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStringDataFormatAdapter() {
        if (stringDataFormatItemProvider == null) {
            stringDataFormatItemProvider = new StringDataFormatItemProvider(this);
        }

        return stringDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.SyslogDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SyslogDataFormatItemProvider syslogDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.SyslogDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSyslogDataFormatAdapter() {
        if (syslogDataFormatItemProvider == null) {
            syslogDataFormatItemProvider = new SyslogDataFormatItemProvider(this);
        }

        return syslogDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ThreadPoolProfileDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ThreadPoolProfileDefinitionItemProvider threadPoolProfileDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ThreadPoolProfileDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createThreadPoolProfileDefinitionAdapter() {
        if (threadPoolProfileDefinitionItemProvider == null) {
            threadPoolProfileDefinitionItemProvider = new ThreadPoolProfileDefinitionItemProvider(this);
        }

        return threadPoolProfileDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ThreadsDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ThreadsDefinitionItemProvider threadsDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ThreadsDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createThreadsDefinitionAdapter() {
        if (threadsDefinitionItemProvider == null) {
            threadsDefinitionItemProvider = new ThreadsDefinitionItemProvider(this);
        }

        return threadsDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ThrottleDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ThrottleDefinitionItemProvider throttleDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ThrottleDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createThrottleDefinitionAdapter() {
        if (throttleDefinitionItemProvider == null) {
            throttleDefinitionItemProvider = new ThrottleDefinitionItemProvider(this);
        }

        return throttleDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ThrowExceptionDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ThrowExceptionDefinitionItemProvider throwExceptionDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ThrowExceptionDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createThrowExceptionDefinitionAdapter() {
        if (throwExceptionDefinitionItemProvider == null) {
            throwExceptionDefinitionItemProvider = new ThrowExceptionDefinitionItemProvider(this);
        }

        return throwExceptionDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TidyMarkupDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TidyMarkupDataFormatItemProvider tidyMarkupDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TidyMarkupDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTidyMarkupDataFormatAdapter() {
        if (tidyMarkupDataFormatItemProvider == null) {
            tidyMarkupDataFormatItemProvider = new TidyMarkupDataFormatItemProvider(this);
        }

        return tidyMarkupDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ToDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ToDefinitionItemProvider toDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ToDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createToDefinitionAdapter() {
        if (toDefinitionItemProvider == null) {
            toDefinitionItemProvider = new ToDefinitionItemProvider(this);
        }

        return toDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TokenizerExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TokenizerExpressionItemProvider tokenizerExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TokenizerExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTokenizerExpressionAdapter() {
        if (tokenizerExpressionItemProvider == null) {
            tokenizerExpressionItemProvider = new TokenizerExpressionItemProvider(this);
        }

        return tokenizerExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TopicLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TopicLoadBalancerDefinitionItemProvider topicLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TopicLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTopicLoadBalancerDefinitionAdapter() {
        if (topicLoadBalancerDefinitionItemProvider == null) {
            topicLoadBalancerDefinitionItemProvider = new TopicLoadBalancerDefinitionItemProvider(this);
        }

        return topicLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TransactedDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TransactedDefinitionItemProvider transactedDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TransactedDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTransactedDefinitionAdapter() {
        if (transactedDefinitionItemProvider == null) {
            transactedDefinitionItemProvider = new TransactedDefinitionItemProvider(this);
        }

        return transactedDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TransformDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TransformDefinitionItemProvider transformDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TransformDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTransformDefinitionAdapter() {
        if (transformDefinitionItemProvider == null) {
            transformDefinitionItemProvider = new TransformDefinitionItemProvider(this);
        }

        return transformDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TrustManagersParametersFactoryBean} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TrustManagersParametersFactoryBeanItemProvider trustManagersParametersFactoryBeanItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TrustManagersParametersFactoryBean}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTrustManagersParametersFactoryBeanAdapter() {
        if (trustManagersParametersFactoryBeanItemProvider == null) {
            trustManagersParametersFactoryBeanItemProvider = new TrustManagersParametersFactoryBeanItemProvider(this);
        }

        return trustManagersParametersFactoryBeanItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.TryDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TryDefinitionItemProvider tryDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.TryDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTryDefinitionAdapter() {
        if (tryDefinitionItemProvider == null) {
            tryDefinitionItemProvider = new TryDefinitionItemProvider(this);
        }

        return tryDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.UnmarshalDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UnmarshalDefinitionItemProvider unmarshalDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.UnmarshalDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUnmarshalDefinitionAdapter() {
        if (unmarshalDefinitionItemProvider == null) {
            unmarshalDefinitionItemProvider = new UnmarshalDefinitionItemProvider(this);
        }

        return unmarshalDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ValidateDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ValidateDefinitionItemProvider validateDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ValidateDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createValidateDefinitionAdapter() {
        if (validateDefinitionItemProvider == null) {
            validateDefinitionItemProvider = new ValidateDefinitionItemProvider(this);
        }

        return validateDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.WeightedLoadBalancerDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected WeightedLoadBalancerDefinitionItemProvider weightedLoadBalancerDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.WeightedLoadBalancerDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createWeightedLoadBalancerDefinitionAdapter() {
        if (weightedLoadBalancerDefinitionItemProvider == null) {
            weightedLoadBalancerDefinitionItemProvider = new WeightedLoadBalancerDefinitionItemProvider(this);
        }

        return weightedLoadBalancerDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.WhenDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected WhenDefinitionItemProvider whenDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.WhenDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createWhenDefinitionAdapter() {
        if (whenDefinitionItemProvider == null) {
            whenDefinitionItemProvider = new WhenDefinitionItemProvider(this);
        }

        return whenDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.WireTapDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected WireTapDefinitionItemProvider wireTapDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.WireTapDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createWireTapDefinitionAdapter() {
        if (wireTapDefinitionItemProvider == null) {
            wireTapDefinitionItemProvider = new WireTapDefinitionItemProvider(this);
        }

        return wireTapDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.XmlBeansDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XmlBeansDataFormatItemProvider xmlBeansDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.XmlBeansDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXmlBeansDataFormatAdapter() {
        if (xmlBeansDataFormatItemProvider == null) {
            xmlBeansDataFormatItemProvider = new XmlBeansDataFormatItemProvider(this);
        }

        return xmlBeansDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.XmlSecurityDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XmlSecurityDataFormatItemProvider xmlSecurityDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.XmlSecurityDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXmlSecurityDataFormatAdapter() {
        if (xmlSecurityDataFormatItemProvider == null) {
            xmlSecurityDataFormatItemProvider = new XmlSecurityDataFormatItemProvider(this);
        }

        return xmlSecurityDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.XPathExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XPathExpressionItemProvider xPathExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.XPathExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXPathExpressionAdapter() {
        if (xPathExpressionItemProvider == null) {
            xPathExpressionItemProvider = new XPathExpressionItemProvider(this);
        }

        return xPathExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.XQueryExpression} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XQueryExpressionItemProvider xQueryExpressionItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.XQueryExpression}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXQueryExpressionAdapter() {
        if (xQueryExpressionItemProvider == null) {
            xQueryExpressionItemProvider = new XQueryExpressionItemProvider(this);
        }

        return xQueryExpressionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.XStreamDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XStreamDataFormatItemProvider xStreamDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.XStreamDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXStreamDataFormatAdapter() {
        if (xStreamDataFormatItemProvider == null) {
            xStreamDataFormatItemProvider = new XStreamDataFormatItemProvider(this);
        }

        return xStreamDataFormatItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.switchyard.tools.models.switchyard1_0.spring.ZipDataFormat} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ZipDataFormatItemProvider zipDataFormatItemProvider;

    /**
     * This creates an adapter for a {@link org.switchyard.tools.models.switchyard1_0.spring.ZipDataFormat}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createZipDataFormatAdapter() {
        if (zipDataFormatItemProvider == null) {
            zipDataFormatItemProvider = new ZipDataFormatItemProvider(this);
        }

        return zipDataFormatItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (aggregateDefinitionItemProvider != null) aggregateDefinitionItemProvider.dispose();
        if (aliasEntryItemProvider != null) aliasEntryItemProvider.dispose();
        if (aliasListItemProvider != null) aliasListItemProvider.dispose();
        if (aopDefinitionItemProvider != null) aopDefinitionItemProvider.dispose();
        if (batchResequencerConfigItemProvider != null) batchResequencerConfigItemProvider.dispose();
        if (beanDefinitionItemProvider != null) beanDefinitionItemProvider.dispose();
        if (bindyDataFormatItemProvider != null) bindyDataFormatItemProvider.dispose();
        if (camelBeanPostProcessorItemProvider != null) camelBeanPostProcessorItemProvider.dispose();
        if (camelConsumerTemplateFactoryBeanItemProvider != null) camelConsumerTemplateFactoryBeanItemProvider.dispose();
        if (camelContextFactoryBeanItemProvider != null) camelContextFactoryBeanItemProvider.dispose();
        if (camelEndpointFactoryBeanItemProvider != null) camelEndpointFactoryBeanItemProvider.dispose();
        if (camelJMXAgentDefinitionItemProvider != null) camelJMXAgentDefinitionItemProvider.dispose();
        if (camelProducerTemplateFactoryBeanItemProvider != null) camelProducerTemplateFactoryBeanItemProvider.dispose();
        if (camelPropertyPlaceholderDefinitionItemProvider != null) camelPropertyPlaceholderDefinitionItemProvider.dispose();
        if (camelProxyFactoryDefinitionItemProvider != null) camelProxyFactoryDefinitionItemProvider.dispose();
        if (camelRedeliveryPolicyFactoryBeanItemProvider != null) camelRedeliveryPolicyFactoryBeanItemProvider.dispose();
        if (camelRouteContextFactoryBeanItemProvider != null) camelRouteContextFactoryBeanItemProvider.dispose();
        if (camelServiceExporterDefinitionItemProvider != null) camelServiceExporterDefinitionItemProvider.dispose();
        if (camelThreadPoolFactoryBeanItemProvider != null) camelThreadPoolFactoryBeanItemProvider.dispose();
        if (castorDataFormatItemProvider != null) castorDataFormatItemProvider.dispose();
        if (catchDefinitionItemProvider != null) catchDefinitionItemProvider.dispose();
        if (choiceDefinitionItemProvider != null) choiceDefinitionItemProvider.dispose();
        if (cipherSuitesParametersItemProvider != null) cipherSuitesParametersItemProvider.dispose();
        if (constantExpressionItemProvider != null) constantExpressionItemProvider.dispose();
        if (constantsItemProvider != null) constantsItemProvider.dispose();
        if (contextScanDefinitionItemProvider != null) contextScanDefinitionItemProvider.dispose();
        if (convertBodyDefinitionItemProvider != null) convertBodyDefinitionItemProvider.dispose();
        if (converterEntryItemProvider != null) converterEntryItemProvider.dispose();
        if (converterListItemProvider != null) converterListItemProvider.dispose();
        if (cryptoDataFormatItemProvider != null) cryptoDataFormatItemProvider.dispose();
        if (csvDataFormatItemProvider != null) csvDataFormatItemProvider.dispose();
        if (customDataFormatItemProvider != null) customDataFormatItemProvider.dispose();
        if (customLoadBalancerDefinitionItemProvider != null) customLoadBalancerDefinitionItemProvider.dispose();
        if (dataFormatItemProvider != null) dataFormatItemProvider.dispose();
        if (dataFormatsDefinitionItemProvider != null) dataFormatsDefinitionItemProvider.dispose();
        if (delayDefinitionItemProvider != null) delayDefinitionItemProvider.dispose();
        if (descriptionDefinitionItemProvider != null) descriptionDefinitionItemProvider.dispose();
        if (documentRootItemProvider != null) documentRootItemProvider.dispose();
        if (dynamicRouterDefinitionItemProvider != null) dynamicRouterDefinitionItemProvider.dispose();
        if (elExpressionItemProvider != null) elExpressionItemProvider.dispose();
        if (enrichDefinitionItemProvider != null) enrichDefinitionItemProvider.dispose();
        if (errorHandlerDefinitionItemProvider != null) errorHandlerDefinitionItemProvider.dispose();
        if (expressionItemProvider != null) expressionItemProvider.dispose();
        if (expressionNodeItemProvider != null) expressionNodeItemProvider.dispose();
        if (expressionNodeHelperItemProvider != null) expressionNodeHelperItemProvider.dispose();
        if (expressionSubElementDefinitionItemProvider != null) expressionSubElementDefinitionItemProvider.dispose();
        if (failoverLoadBalancerDefinitionItemProvider != null) failoverLoadBalancerDefinitionItemProvider.dispose();
        if (filterDefinitionItemProvider != null) filterDefinitionItemProvider.dispose();
        if (filterParametersItemProvider != null) filterParametersItemProvider.dispose();
        if (finallyDefinitionItemProvider != null) finallyDefinitionItemProvider.dispose();
        if (flatpackDataFormatItemProvider != null) flatpackDataFormatItemProvider.dispose();
        if (fromDefinitionItemProvider != null) fromDefinitionItemProvider.dispose();
        if (groovyExpressionItemProvider != null) groovyExpressionItemProvider.dispose();
        if (gzipDataFormatItemProvider != null) gzipDataFormatItemProvider.dispose();
        if (headerExpressionItemProvider != null) headerExpressionItemProvider.dispose();
        if (hl7DataFormatItemProvider != null) hl7DataFormatItemProvider.dispose();
        if (idempotentConsumerDefinitionItemProvider != null) idempotentConsumerDefinitionItemProvider.dispose();
        if (implicitCollectionEntryItemProvider != null) implicitCollectionEntryItemProvider.dispose();
        if (implicitCollectionListItemProvider != null) implicitCollectionListItemProvider.dispose();
        if (inOnlyDefinitionItemProvider != null) inOnlyDefinitionItemProvider.dispose();
        if (inOutDefinitionItemProvider != null) inOutDefinitionItemProvider.dispose();
        if (interceptDefinitionItemProvider != null) interceptDefinitionItemProvider.dispose();
        if (interceptFromDefinitionItemProvider != null) interceptFromDefinitionItemProvider.dispose();
        if (interceptSendToEndpointDefinitionItemProvider != null) interceptSendToEndpointDefinitionItemProvider.dispose();
        if (javaScriptExpressionItemProvider != null) javaScriptExpressionItemProvider.dispose();
        if (jaxbDataFormatItemProvider != null) jaxbDataFormatItemProvider.dispose();
        if (jibxDataFormatItemProvider != null) jibxDataFormatItemProvider.dispose();
        if (jsonDataFormatItemProvider != null) jsonDataFormatItemProvider.dispose();
        if (jxPathExpressionItemProvider != null) jxPathExpressionItemProvider.dispose();
        if (keyManagersParametersFactoryBeanItemProvider != null) keyManagersParametersFactoryBeanItemProvider.dispose();
        if (keyStoreParametersFactoryBeanItemProvider != null) keyStoreParametersFactoryBeanItemProvider.dispose();
        if (languageExpressionItemProvider != null) languageExpressionItemProvider.dispose();
        if (loadBalanceDefinitionItemProvider != null) loadBalanceDefinitionItemProvider.dispose();
        if (loadBalancerItemProvider != null) loadBalancerItemProvider.dispose();
        if (logDefinitionItemProvider != null) logDefinitionItemProvider.dispose();
        if (loopDefinitionItemProvider != null) loopDefinitionItemProvider.dispose();
        if (marshalDefinitionItemProvider != null) marshalDefinitionItemProvider.dispose();
        if (methodCallExpressionItemProvider != null) methodCallExpressionItemProvider.dispose();
        if (modelHelperItemProvider != null) modelHelperItemProvider.dispose();
        if (multicastDefinitionItemProvider != null) multicastDefinitionItemProvider.dispose();
        if (mvelExpressionItemProvider != null) mvelExpressionItemProvider.dispose();
        if (nodeFactoryItemProvider != null) nodeFactoryItemProvider.dispose();
        if (noOutputExpressionNodeItemProvider != null) noOutputExpressionNodeItemProvider.dispose();
        if (ognlExpressionItemProvider != null) ognlExpressionItemProvider.dispose();
        if (omitFieldEntryItemProvider != null) omitFieldEntryItemProvider.dispose();
        if (omitFieldListItemProvider != null) omitFieldListItemProvider.dispose();
        if (onCompletionDefinitionItemProvider != null) onCompletionDefinitionItemProvider.dispose();
        if (onExceptionDefinitionItemProvider != null) onExceptionDefinitionItemProvider.dispose();
        if (otherwiseDefinitionItemProvider != null) otherwiseDefinitionItemProvider.dispose();
        if (outputItemProvider != null) outputItemProvider.dispose();
        if (packageScanDefinitionItemProvider != null) packageScanDefinitionItemProvider.dispose();
        if (phpExpressionItemProvider != null) phpExpressionItemProvider.dispose();
        if (pipelineDefinitionItemProvider != null) pipelineDefinitionItemProvider.dispose();
        if (pgpDataFormatItemProvider != null) pgpDataFormatItemProvider.dispose();
        if (policyDefinitionItemProvider != null) policyDefinitionItemProvider.dispose();
        if (pollEnrichDefinitionItemProvider != null) pollEnrichDefinitionItemProvider.dispose();
        if (processDefinitionItemProvider != null) processDefinitionItemProvider.dispose();
        if (processorDefinitionHelperItemProvider != null) processorDefinitionHelperItemProvider.dispose();
        if (propertiesDefinitionItemProvider != null) propertiesDefinitionItemProvider.dispose();
        if (propertyDefinitionItemProvider != null) propertyDefinitionItemProvider.dispose();
        if (propertyExpressionItemProvider != null) propertyExpressionItemProvider.dispose();
        if (protobufDataFormatItemProvider != null) protobufDataFormatItemProvider.dispose();
        if (pythonExpressionItemProvider != null) pythonExpressionItemProvider.dispose();
        if (randomLoadBalancerDefinitionItemProvider != null) randomLoadBalancerDefinitionItemProvider.dispose();
        if (recipientListDefinitionItemProvider != null) recipientListDefinitionItemProvider.dispose();
        if (redeliveryPolicyDefinitionItemProvider != null) redeliveryPolicyDefinitionItemProvider.dispose();
        if (refExpressionItemProvider != null) refExpressionItemProvider.dispose();
        if (removeHeaderDefinitionItemProvider != null) removeHeaderDefinitionItemProvider.dispose();
        if (removeHeadersDefinitionItemProvider != null) removeHeadersDefinitionItemProvider.dispose();
        if (removePropertyDefinitionItemProvider != null) removePropertyDefinitionItemProvider.dispose();
        if (resequenceDefinitionItemProvider != null) resequenceDefinitionItemProvider.dispose();
        if (rollbackDefinitionItemProvider != null) rollbackDefinitionItemProvider.dispose();
        if (roundRobinLoadBalancerDefinitionItemProvider != null) roundRobinLoadBalancerDefinitionItemProvider.dispose();
        if (routeBuilderDefinitionItemProvider != null) routeBuilderDefinitionItemProvider.dispose();
        if (routeContextRefDefinitionItemProvider != null) routeContextRefDefinitionItemProvider.dispose();
        if (routeDefinitionItemProvider != null) routeDefinitionItemProvider.dispose();
        if (routeDefinitionHelperItemProvider != null) routeDefinitionHelperItemProvider.dispose();
        if (routesDefinitionItemProvider != null) routesDefinitionItemProvider.dispose();
        if (routingSlipDefinitionItemProvider != null) routingSlipDefinitionItemProvider.dispose();
        if (rssDataFormatItemProvider != null) rssDataFormatItemProvider.dispose();
        if (rubyExpressionItemProvider != null) rubyExpressionItemProvider.dispose();
        if (samplingDefinitionItemProvider != null) samplingDefinitionItemProvider.dispose();
        if (secureRandomParametersFactoryBeanItemProvider != null) secureRandomParametersFactoryBeanItemProvider.dispose();
        if (secureSocketProtocolsParametersItemProvider != null) secureSocketProtocolsParametersItemProvider.dispose();
        if (serializationDataFormatItemProvider != null) serializationDataFormatItemProvider.dispose();
        if (setBodyDefinitionItemProvider != null) setBodyDefinitionItemProvider.dispose();
        if (setExchangePatternDefinitionItemProvider != null) setExchangePatternDefinitionItemProvider.dispose();
        if (setFaultBodyDefinitionItemProvider != null) setFaultBodyDefinitionItemProvider.dispose();
        if (setHeaderDefinitionItemProvider != null) setHeaderDefinitionItemProvider.dispose();
        if (setOutHeaderDefinitionItemProvider != null) setOutHeaderDefinitionItemProvider.dispose();
        if (setPropertyDefinitionItemProvider != null) setPropertyDefinitionItemProvider.dispose();
        if (simpleExpressionItemProvider != null) simpleExpressionItemProvider.dispose();
        if (soapJaxbDataFormatItemProvider != null) soapJaxbDataFormatItemProvider.dispose();
        if (sortDefinitionItemProvider != null) sortDefinitionItemProvider.dispose();
        if (spELExpressionItemProvider != null) spELExpressionItemProvider.dispose();
        if (splitDefinitionItemProvider != null) splitDefinitionItemProvider.dispose();
        if (sqlExpressionItemProvider != null) sqlExpressionItemProvider.dispose();
        if (sslContextClientParametersFactoryBeanItemProvider != null) sslContextClientParametersFactoryBeanItemProvider.dispose();
        if (sslContextParametersFactoryBeanItemProvider != null) sslContextParametersFactoryBeanItemProvider.dispose();
        if (sslContextServerParametersFactoryBeanItemProvider != null) sslContextServerParametersFactoryBeanItemProvider.dispose();
        if (stickyLoadBalancerDefinitionItemProvider != null) stickyLoadBalancerDefinitionItemProvider.dispose();
        if (stopDefinitionItemProvider != null) stopDefinitionItemProvider.dispose();
        if (streamResequencerConfigItemProvider != null) streamResequencerConfigItemProvider.dispose();
        if (stringDataFormatItemProvider != null) stringDataFormatItemProvider.dispose();
        if (syslogDataFormatItemProvider != null) syslogDataFormatItemProvider.dispose();
        if (threadPoolProfileDefinitionItemProvider != null) threadPoolProfileDefinitionItemProvider.dispose();
        if (threadsDefinitionItemProvider != null) threadsDefinitionItemProvider.dispose();
        if (throttleDefinitionItemProvider != null) throttleDefinitionItemProvider.dispose();
        if (throwExceptionDefinitionItemProvider != null) throwExceptionDefinitionItemProvider.dispose();
        if (tidyMarkupDataFormatItemProvider != null) tidyMarkupDataFormatItemProvider.dispose();
        if (toDefinitionItemProvider != null) toDefinitionItemProvider.dispose();
        if (tokenizerExpressionItemProvider != null) tokenizerExpressionItemProvider.dispose();
        if (topicLoadBalancerDefinitionItemProvider != null) topicLoadBalancerDefinitionItemProvider.dispose();
        if (transactedDefinitionItemProvider != null) transactedDefinitionItemProvider.dispose();
        if (transformDefinitionItemProvider != null) transformDefinitionItemProvider.dispose();
        if (trustManagersParametersFactoryBeanItemProvider != null) trustManagersParametersFactoryBeanItemProvider.dispose();
        if (tryDefinitionItemProvider != null) tryDefinitionItemProvider.dispose();
        if (unmarshalDefinitionItemProvider != null) unmarshalDefinitionItemProvider.dispose();
        if (validateDefinitionItemProvider != null) validateDefinitionItemProvider.dispose();
        if (weightedLoadBalancerDefinitionItemProvider != null) weightedLoadBalancerDefinitionItemProvider.dispose();
        if (whenDefinitionItemProvider != null) whenDefinitionItemProvider.dispose();
        if (wireTapDefinitionItemProvider != null) wireTapDefinitionItemProvider.dispose();
        if (xmlBeansDataFormatItemProvider != null) xmlBeansDataFormatItemProvider.dispose();
        if (xmlSecurityDataFormatItemProvider != null) xmlSecurityDataFormatItemProvider.dispose();
        if (xPathExpressionItemProvider != null) xPathExpressionItemProvider.dispose();
        if (xQueryExpressionItemProvider != null) xQueryExpressionItemProvider.dispose();
        if (xStreamDataFormatItemProvider != null) xStreamDataFormatItemProvider.dispose();
        if (zipDataFormatItemProvider != null) zipDataFormatItemProvider.dispose();
    }

}
